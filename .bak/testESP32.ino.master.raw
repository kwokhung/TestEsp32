#include <stdio.h>
#include <FreeRTOS.h>
#include <esp_task_wdt.h>
#include <driver/i2c.h>

#define DATA_LENGTH 512   /*!<Data buffer length for test buffer*/
#define RW_TEST_LENGTH 4 /*!<Data length for r/w test, any value from 0-DATA_LENGTH*/

#define I2C_EXAMPLE_MASTER_SCL_IO GPIO_NUM_22 /*!< gpio number for I2C master clock */
#define I2C_EXAMPLE_MASTER_SDA_IO GPIO_NUM_21 /*!< gpio number for I2C master data  */
#define I2C_EXAMPLE_MASTER_NUM I2C_NUM_1      /*!< I2C port number for master dev */
#define I2C_EXAMPLE_MASTER_TX_BUF_DISABLE 0   /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_RX_BUF_DISABLE 0   /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_FREQ_HZ 100000     /*!< I2C master clock frequency */

#define ESP_SLAVE_ADDR 0x28        /*!< ESP32 slave address, you can set any 7bit value */
#define WRITE_BIT I2C_MASTER_WRITE /*!< I2C master write */
#define ACK_CHECK_EN 0x1           /*!< I2C master will check ack from slave*/

static void i2c_example_master_init()
{
  i2c_port_t i2c_master_port = I2C_EXAMPLE_MASTER_NUM;
  i2c_config_t conf;

  conf.mode = I2C_MODE_MASTER;
  conf.sda_io_num = I2C_EXAMPLE_MASTER_SDA_IO;
  conf.sda_pullup_en = GPIO_PULLUP_ENABLE;
  conf.scl_io_num = I2C_EXAMPLE_MASTER_SCL_IO;
  conf.scl_pullup_en = GPIO_PULLUP_ENABLE;
  conf.master.clk_speed = I2C_EXAMPLE_MASTER_FREQ_HZ;

  i2c_param_config(i2c_master_port, &conf);

  i2c_driver_install(i2c_master_port, conf.mode,
                     I2C_EXAMPLE_MASTER_RX_BUF_DISABLE,
                     I2C_EXAMPLE_MASTER_TX_BUF_DISABLE, 0);
}

static esp_err_t i2c_example_master_write_slave(i2c_port_t i2c_num, uint8_t *data_wr, size_t size)
{
  i2c_cmd_handle_t cmd = i2c_cmd_link_create();

  i2c_master_start(cmd);
  i2c_master_write_byte(cmd, (ESP_SLAVE_ADDR << 1) | WRITE_BIT, ACK_CHECK_EN);
  i2c_master_write(cmd, data_wr, size, ACK_CHECK_EN);
  i2c_master_stop(cmd);

  esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);

  i2c_cmd_link_delete(cmd);

  return ret;
}

static void disp_buf(uint8_t *buf, int len)
{
  int i;

  for (i = 0; i < len; i++)
  {
    printf("%02x ", buf[i]);

    if ((i + 1) % 16 == 0)
    {
      printf("\n");
    }
  }

  printf("\n");
}

void setup()
{
  Serial.begin(115200);

  i2c_example_master_init();

  Serial.println("i2c_example_master_init");
}

void loop()
{
  int ret;
  uint8_t *data_wr = (uint8_t *)malloc(DATA_LENGTH);

  data_wr[0] = 0x00;
  data_wr[1] = 0x01;
  data_wr[2] = 0x01;
  data_wr[3] = 0x00;

  while (true)
  {
    ret = i2c_example_master_write_slave(I2C_EXAMPLE_MASTER_NUM, data_wr, RW_TEST_LENGTH);

    if (ret == ESP_ERR_TIMEOUT)
    {
      printf("I2C timeout\n");
    }
    else if (ret == ESP_OK)
    {
      printf("*******************\n");
      printf("MASTER WRITE TO SLAVE\n");
      printf("*******************\n");
      printf("----Master write ----\n");

      disp_buf(data_wr, RW_TEST_LENGTH);
    }
    else
    {
      printf("Master write slave error, IO not connected....\n");
    }

    for (int i = 0; i < 100; i++)
    {
      esp_task_wdt_reset();

      delay(1);
    }
  }
}
