#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLECharacteristic *pCharacteristicTx;
BLECharacteristic *pCharacteristicRx;

bool deviceConnected = false;
float txValue = 0;
const int readPin = 32; // Use GPIO number. See ESP32 board pinouts
const int LED = 2;      // Could be different depending on the dev board. I used the DOIT ESP32 dev board.

#define SERVICE_UUID "6E400001-B5A3-F393-E0A9-E50E24DCCA9E" // UART service UUID
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

class MyServerCallbacks : public BLEServerCallbacks
{
    void onConnect(BLEServer *pServer)
    {
        deviceConnected = true;
    };

    void onDisconnect(BLEServer *pServer)
    {
        deviceConnected = false;
    }
};

class MyCallbacks : public BLECharacteristicCallbacks
{
    void onWrite(BLECharacteristic *pCharacteristic)
    {
        std::string rxValue = pCharacteristic->getValue();

        if (rxValue.length() > 0)
        {
            Serial.println("*********");
            Serial.print("Received Value: ");

            for (int i = 0; i < rxValue.length(); i++)
            {
                Serial.print(rxValue[i]);
            }

            Serial.println();
            Serial.println("*********");
        }

        // Do stuff based on the command received from the app
        // For some reason using rxValue.compare("A") == 0 doesn't work. Maybe
        // there are hidden characters I'm not seeing?
        if (rxValue.find("A") != -1)
        {
            Serial.println("Turning ON!");
            digitalWrite(LED, HIGH);
        }
        else if (rxValue.find("B") != -1)
        {
            Serial.println("Turning OFF!");
            digitalWrite(LED, LOW);
        }
    }
};

void setup()
{
    Serial.begin(115200);

    pinMode(LED, OUTPUT);

    BLEDevice::init("ESP32 BT Serial");

    BLEServer *pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    BLEService *pService = pServer->createService(SERVICE_UUID);

    pCharacteristicTx = pService->createCharacteristic(CHARACTERISTIC_UUID_TX, BLECharacteristic::PROPERTY_NOTIFY);

    pCharacteristicTx->addDescriptor(new BLE2902());

    pCharacteristicRx = pService->createCharacteristic(CHARACTERISTIC_UUID_RX, BLECharacteristic::PROPERTY_WRITE);

    pCharacteristicRx->setCallbacks(new MyCallbacks());

    pService->start();
    pServer->getAdvertising()->start();

    Serial.println("Waiting a client connection to notify...");
}

void loop()
{
    if (deviceConnected)
    {
        // Fabricate some arbitrary junk for now...
        txValue = analogRead(readPin) / 3.456; // This could be an actual sensor reading!

        // Let's convert the value to a char array:
        char txString[8];                 // make sure this is big enuffz
        dtostrf(txValue, 1, 2, txString); // float_val, min_width, digits_after_decimal, char_buffer

        //    pCharacteristicTx->setValue(&txValue, 1); // To send the integer value
        //    pCharacteristicTx->setValue("Hello!"); // Sending a test message
        pCharacteristicTx->setValue(txString);

        pCharacteristicTx->notify(); // Send the value to the app!
        Serial.print("*** Sent Value: ");
        Serial.print(txString);
        Serial.println(" ***");
    }

    delay(1000);
}
